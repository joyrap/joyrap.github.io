<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on </title>
    <link>//localhost:1313/categories/programming/</link>
    <description>Recent content in Programming on </description>
    <generator>Hugo 0.125.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 08 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mixin in Java</title>
      <link>//localhost:1313/post/2024-01-08-java-mix-in/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/post/2024-01-08-java-mix-in/</guid>
      <description>什么是Mixin 维基百科的解释是：&#xA;In object-oriented programming languages, a mixin is a class that contains methods for use by other classes without having to be the parent class of those other classes. How those other classes gain access to the mixin&amp;rsquo;s methods depends on the language. Mixins are sometimes described as being &amp;ldquo;included&amp;rdquo; rather than &amp;ldquo;inherited&amp;rdquo;.&#xA;简而言之就是：通过组合而不是继承的方式获得其他类所提供的功能。&#xA;Java中是如何做到的 面向对象编程语言可以通过继承来达到功能复用目的，但继承也会有不少陷阱，或者说有时候他们并不满足设计上的需求。&#xA;例如我们想让类具备另外多个已经存在于其他类中的功能，那么通过继承就无法实现，因为Java不允许多重继承。而且子类会全部继承父类的开放功能，也不是我们期望的，在Effective Java中也推荐优先选择复合而不是继承。&#xA;从关系类型上来说，我们也不希望为了获得某个功能，让类之间成为IS-A的关系。&#xA;这时候我们自然想到的就是接口，接口作为开放的协议约定，所有类都可以实现接口，同时类可以实现多个接口。为了让类可以实现接口同时又能获得默认实现，Java在接口中设计了default默认实现方法，这样子类可以在不需要自己实现的情况下获得接口中默认提供的功能（这里的default方法还解决了新增接口方法导致实现类变更的问题），变相地实现了多继承。&#xA;例如下面这种情况：&#xA;class A{ ... } interface B{ ... default void show(){}; .</description>
    </item>
    <item>
      <title>计算机多内核平台上的并发锁优化(二)</title>
      <link>//localhost:1313/post/2020-08-21-locks-on-multicore2/</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/post/2020-08-21-locks-on-multicore2/</guid>
      <description>申明: 大部分内容来源于网络，我不生产知识，我只是字符串搬运工。&#xA;在Algorithms for scalable synchronization on shared-memory multiprocessors这篇论文中，CLH锁之前还提到了另外一个锁算法。&#xA;凭证锁(The Ticket Lock) 这个算法也很形象，比如你去10元快剪理发(假设只有一个理发师)，你得先买票，出票机在出票的时候，会显示前面还有几位在等待，你需要等待多久呢？&#xA;假设一个人理发需要10分钟，如果你前面有两人，那么你就要等20分钟。&#xA;凭证锁有两个变量，一个表示当前服务的凭证，另外一个是下一个将被服务的凭证。&#xA;实现如下:&#xA;public class TicketLock { private final AtomicLong nextTicket = new AtomicLong(0); private final AtomicLong nowServing = new AtomicLong(0); public void lock() { long myTicket = nextTicket.getAndIncrement(); while (true) { //只为了表达算法，没catch异常 Thread.sleep(myTicket - nowServing.get()); if (nowServing.get() == myTicket) { return; } } } public void unlock() { nowServing.incrementAndGet(); } } 凭证锁在test_and_set锁的基础上，其实也是做到了FIFO的公平性，而且不会有饥饿的情况。&#xA;凭证锁相当于用事件计数和序号实现的信号量。&#xA;这种锁的缺点也很明显，需要循环读取nowServing变量，在多核CPU多级缓存架构下，同时读取共享变量，会带来大量的内存和带宽竞争，虽然sleep降低了内核之间的连续竞争,但随着获取锁的内核数量增加，会导致Exponential backoff。</description>
    </item>
    <item>
      <title>计算机多内核平台上的并发锁优化(一)</title>
      <link>//localhost:1313/post/2020-08-19-locks-on-multicore/</link>
      <pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/post/2020-08-19-locks-on-multicore/</guid>
      <description>申明: 大部分内容来源于网络，我不生产知识，我只是字符串搬运工。&#xA;如何在高并发的情况下，提高多核CPU的性能，一直是在并发编程领域中非常重要的问题。 特别是随着云厂商按计算收费的当下，如何有效地利用计算资源变得更重要。&#xA;致富的途径只有两种：一种是拼命赚钱，另外一种就是有钱后节约花钱。&#xA;什么是锁 在计算机硬件层其实是没有锁这个概念的，计算机领域中的锁来源于现实生活中的锁，它的作用是保护某种资源同一时间不能被多人访问。现代计算机已经发展成了多核CPU处理器，我们需要通过锁机制来协调多个内核对资源的访问操作。&#xA;和现实中一样，在给资源上锁的时候，我们可能需要几个步骤：&#xA;拿出钥匙 锁上资源 解锁 计算机中对应的CPU操作就是执行几条指令(CPU每条执行指令都是原子级别的操作，要么成功，要么失败，这是二进制世界的规则)。&#xA;这里罗列几条与后面要讲到的锁相关的硬件同步汇编指令&#xA;test_and_set swap get_and_add test_and_set 由3条CPU原语组成&#xA;​ boolean test_and_set(*lock){ ​ boolean old=*lock; ​ *lock=true; ​ return old; } BTS 指令含义是在执行 BT 命令的同时, 把操作数的指定位置为 1&#xA;do{ //当*lock为false是跳出该循环 while(test_and_set(*lock)); critical section;//访问临界区 *lock=false; }while(true) swap也是由三条CPU原语组成: BSWAP指令含义是：把32/64位寄存器的值按照低和高的字节交换(下面代码实现其实就是0=false,1=true交换)&#xA;void swap(boolean *a,boolean *b){ boolean temp=*a; *a=*b; *b=temp; } do{ key=true; do{ swap(&amp;amp;lock,&amp;amp;key); }while(key) //上面初值为false cirtical section//访问临界资源 lock=false; }while(true) 上面简要地说明了通过CPU硬件同步原语，对某个内存地址标志位的修改，起到加锁的作用。&#xA;那么锁机制和性能有什么关系呢？这得从内存(Memory)，CPU缓存说起。&#xA;多核CPU多级缓存架构 早期的CPU架构基本上都采用SMP(Symmetric Multi-Processor)，这种对称多处理器结构，多个CPU内核共享内存资源，除了内存速度访问慢以外， 还可能导致访问冲突。</description>
    </item>
    <item>
      <title>不可测试的代码</title>
      <link>//localhost:1313/post/2020-01-21-untestable-code/</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/post/2020-01-21-untestable-code/</guid>
      <description>故事是这样的，我最近深陷在一个刚接手不久的项目中，经过完成两轮需求上线后， 我迫切地告诉自己，需要给这个项目完善一下测试用例（原工程测试用例几乎为零）， 然而事情并不是我想象的那么简单。&#xA;经过两天给项目引入EasyMock，Jmockit相关测试框架，最终我还是没有完成对其中一个任务Job的测试代码。虽然结果不如我的预期，但这种挫败感反而让我平静，让我思索这一切为何反复发生，像一部递归的电影。&#xA;现实就是，大部分程序员在其职业生涯中，半数以上的时间都是工作在别人的代码之上的。&#xA;相对于写出不可阅读的代码，写出不可测试的代码的情况更常见。&#xA;究其原因，问题还是出在测试上。&#xA;通过对相关参考书籍走马观花的阅读，我总结了以下两点书中未提及的现象。&#xA;纠正认知 在日常生活中，我们作出很多行为，并不需要考虑一个问题：如何测试行为结果是否符合预期？所以我们基本不会把生活中的未知结果，定义为不可测试。&#xA;另外一个现实是，我们进入程序员这个行业的时候，首先学会的是如何利用工具创造（软件开发），然后才衍生出如何测试。创造和测试作为两个完全独立的部分被认知，结果就是我们花更多的时间在创造上。&#xA;如今软件工程越来越庞大，业务领域越来越复杂，所以如果要将软件开发分解成创造和测试两个部分的话，我觉得在他们各自的投入上应该是五五开。&#xA;我看到的很多工程都是在完成需求上花的时间比测试更多，虽然他们声称测试很重要。&#xA;如果整个软件构建链条上的所有人员达成了共识，那么就可以借助相关的技术来完成任务。&#xA;保持风格统一 让我们再回到代码工程中，软件开发就像写作，你可以在一定的原则下完成创作，既然是创作就有风格问题。&#xA;多人协作的项目里，很容易留下开发人员的风格，所以很多团队推出了自己的工程规范，以及代码规范，比如Google Java Style Guide，尽管这些开发人员熟读了《重构 改善既有代码的设计（第2版 ）》这样经典的指导书籍，但风格问题还是会在项目中出现。&#xA;当你加入一个项目时，首先要弄清现有工程的风格是什么样的，在重构的过程中尽量避免破坏好的风格，引入自己独特的风格。&#xA;总结 回到我的故事，我属于进攻型编程人员，在面对不可测试的的代码时，会让情况变得更糟糕，所以还是反复确认了几个原则:&#xA;能工作的代码，就尽量不要改善它。 在有单元测试的情况下，最小单元修改。 不写代码，就不会有BUG。 最后总结：术可以学习，但道却需要领悟。&#xA;&amp;mdash;&amp;mdash; 我是分割线 &amp;mdash;&amp;mdash;&#xA;下面的相关书籍，在开发，测试，重构方面提供了很好指导，值得仔细反复阅读。&#xA;Unmaintainable Code 重构 改善既有代码的设计（第2版 ） Work Effectively With Legacy Code Growing Object-Oriented Software, Guided by Tests Understand Legacy Code </description>
    </item>
    <item>
      <title>Clojure中的数据类型</title>
      <link>//localhost:1313/post/2019-11-19-clojure-datatypes/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/post/2019-11-19-clojure-datatypes/</guid>
      <description>Clojure作为一款基于JVM的LISP语言，我个人从创造者Rich Hickey身上吸收了很多编程的观点，尽管作者提出了很多面向对象编程语言的缺陷，但单从语言本身来说，作者更希望通过JVM这个平台对寄主语言(Java)提供一种补充，只不过是通过LISP的方式。&#xA;封装与多态性 封装和多态性是面向对象编程语言的两大特性，松本行弘认为&#xA;面向对象的设计方法是在结构化编程对控制流程实现了结构化后，又加上了对数据的结构化&#xA;不需要知道内部的详细处理就可以进行操作(封装，数据抽象) 根据不通的数据类型自动选择适当的方法(多态性) Java利用类和接口虽然解决了很多设计问题，但是看上去还是不够优雅，比如类不能多继承，所以Clojure希望通过更彻底的方式来做到更高级的抽象。&#xA;认识Java的类 在拥有了基本的数据结构(set，vector，list，map)之后，我们就可以依赖这些基础数据结构构建我们模型，通过组合的方式来表达业务领域，在Java中是这样的：&#xA;Class User { private String name; //数据 private int age; //数据 .... public String getName(){ //行为 .... } public void setName(String name){ //行为 .... } } 但这个POJO将数据和行为交织在一起，如果在行为中没有任何业务逻辑，仅仅是暴露数据给外部，在领域驱动设计中这叫贫血对象，根据个人的经验，这样的贫血对象设计在很多Java系统都存在，同样的领域概念不能在系统中重用，想象一下，在社交系统中有User领域模型，电商系统中可能也包含一个User领域模型，但你不能重用两个系统之间完全相同的数据模型。&#xA;defprotocol 在Java里通过interface来定义行为(和Clojure的definterface是完全一致的)，一个类可以实现多个interface，子类可以重写父类的方法来实现多态。但是接口的问题是一旦被创建，就很难被扩展，Clojure的解决方案是协议defprotocol,它比接口更灵活，例如:&#xA;(defprotocol Dateable (to-ms [t])) ;定义一个包含to-ms方法的接口 (extend java.util.Date Dateable {:to-ms #(.getTime %)}) ;java.util.Date实现了这个接口 (to-ms (java.util.Date.)) ;java.util.Date具备了to-ms方法 在Java中可以通过继承或者组合的方式实现对原有类的扩展，但是会显得很笨粗，Clojure避免了不必要的多层次封装/适配，在不修改原有类同时不新增类的基础上实现了真正的多态性。defprotocol 除了可以被deftype,defrecord,reify实现外，也可以被Java中的类实现。&#xA;数据与行为分离 所以，Clojure提供更明确的方式，数据必须具有不可变性(函数式编程特性)，行为是在更搞层次抽象。推荐将数据和行为分别定义，Clojure提供了deftype，defrecord，reify, defprotocol来达到这个目的，他们就是Clojure的数据类型。defrecord用于映射你的数据记录，deftype可以理解为Java中的class，defprotocol定义行为。&#xA;defrecord defrecord在Clojure里面可以理解为是另外一种map变形方式,例如一个定义User领域模型的map为:&#xA;(def user {&amp;#34;name&amp;#34; &amp;#34;xiebiao&amp;#34; , &amp;#34;age&amp;#34; 30}) (:name user) 用defrecord来表达:</description>
    </item>
    <item>
      <title>如何利用Linux命令简单加密文本</title>
      <link>//localhost:1313/post/2017-02-04-how-to-encrypt-by-linux-command/</link>
      <pubDate>Sat, 04 Feb 2017 18:24:47 +0000</pubDate>
      <guid>//localhost:1313/post/2017-02-04-how-to-encrypt-by-linux-command/</guid>
      <description>在web上无论企业还是个人网站，总会发布一些邮箱的联系方式，由于邮箱地址置于html页面中，很容易被 爬虫获取，导致邮箱被垃圾邮件挤满。&#xA;所以，如果你确定要暴露你的邮箱到互联网上，那么你至少应该使用一种加密方式。&#xA;下面介绍两种简单加密方法。&#xA;使用xxd,bc,dc命令加密解密 第一步(将文本转换为16进制):&#xA;$ echo &amp;quot;xxxxx@gmail.com&amp;quot;|xxd -ps -u&#xA;$ 787878787840676D61696C2E636F6D0A&#xA;第二步(将16进制转换为10进制):&#xA;$ echo &amp;quot;ibase=16; 787878787840676D61696C2E636F6D0A&amp;quot;|bc&#xA;$ 160132878550962084828530736251255352586&#xA;解密:&#xA;$ dc -e 160132878550962084828530736251255352586P&#xA;使用base64编码 第一步:&#xA;$ echo &amp;quot;xxxxx@gmail.com&amp;quot;|base64 -i&#xA;$ eHh4eHhAZ21haWwuY29tCg==&#xA;第二步:&#xA;$ echo &amp;quot;eHh4eHhAZ21haWwuY29tCg==&amp;quot;|base64 -d&#xA;$ xxxxx@gmail.com&#xA;总结 上面的方法只是防止人和机器直接识别出文本，并算不上真正意义上的加密。</description>
    </item>
    <item>
      <title>Notification Pattern理解</title>
      <link>//localhost:1313/post/2012-06-20-notification-pattern/</link>
      <pubDate>Wed, 20 Jun 2012 11:24:47 +0000</pubDate>
      <guid>//localhost:1313/post/2012-06-20-notification-pattern/</guid>
      <description>场景 在MVC的架构中，我们想从Model层传递一些错误信息到View层，比如用户注册这个功能，用户填写了密码，邮箱，然后提交注册， 这时候我们后端需要对前端的数据做校验，同时将校验的结果返回给View层，这时候就能用到Notification模式.&#xA;思路 先定义Notification:&#xA;public class Notification { private List _errors; public Notification() { _errors = new ArrayList(); } public void clear() { _errors.clear(); } public boolean hasError() { if (this._errors != null &amp;amp;&amp;amp; this.errors().size() &amp;gt; 0) { return true; } return false; } public List errors() { return this._errors; } public class Error { private String _message; public Error(String messgae) { this._message = messgae; } public String getMessage() { return _message; } public void set_message(String _message) { this.</description>
    </item>
  </channel>
</rss>
