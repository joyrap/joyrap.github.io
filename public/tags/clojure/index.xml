<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojure on </title>
    <link>//localhost:1313/tags/clojure/</link>
    <description>Recent content in Clojure on </description>
    <generator>Hugo 0.125.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 19 Nov 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/tags/clojure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clojure中的数据类型</title>
      <link>//localhost:1313/post/2019-11-19-clojure-datatypes/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/post/2019-11-19-clojure-datatypes/</guid>
      <description>Clojure作为一款基于JVM的LISP语言，我个人从创造者Rich Hickey身上吸收了很多编程的观点，尽管作者提出了很多面向对象编程语言的缺陷，但单从语言本身来说，作者更希望通过JVM这个平台对寄主语言(Java)提供一种补充，只不过是通过LISP的方式。&#xA;封装与多态性 封装和多态性是面向对象编程语言的两大特性，松本行弘认为&#xA;面向对象的设计方法是在结构化编程对控制流程实现了结构化后，又加上了对数据的结构化&#xA;不需要知道内部的详细处理就可以进行操作(封装，数据抽象) 根据不通的数据类型自动选择适当的方法(多态性) Java利用类和接口虽然解决了很多设计问题，但是看上去还是不够优雅，比如类不能多继承，所以Clojure希望通过更彻底的方式来做到更高级的抽象。&#xA;认识Java的类 在拥有了基本的数据结构(set，vector，list，map)之后，我们就可以依赖这些基础数据结构构建我们模型，通过组合的方式来表达业务领域，在Java中是这样的：&#xA;Class User { private String name; //数据 private int age; //数据 .... public String getName(){ //行为 .... } public void setName(String name){ //行为 .... } } 但这个POJO将数据和行为交织在一起，如果在行为中没有任何业务逻辑，仅仅是暴露数据给外部，在领域驱动设计中这叫贫血对象，根据个人的经验，这样的贫血对象设计在很多Java系统都存在，同样的领域概念不能在系统中重用，想象一下，在社交系统中有User领域模型，电商系统中可能也包含一个User领域模型，但你不能重用两个系统之间完全相同的数据模型。&#xA;defprotocol 在Java里通过interface来定义行为(和Clojure的definterface是完全一致的)，一个类可以实现多个interface，子类可以重写父类的方法来实现多态。但是接口的问题是一旦被创建，就很难被扩展，Clojure的解决方案是协议defprotocol,它比接口更灵活，例如:&#xA;(defprotocol Dateable (to-ms [t])) ;定义一个包含to-ms方法的接口 (extend java.util.Date Dateable {:to-ms #(.getTime %)}) ;java.util.Date实现了这个接口 (to-ms (java.util.Date.)) ;java.util.Date具备了to-ms方法 在Java中可以通过继承或者组合的方式实现对原有类的扩展，但是会显得很笨粗，Clojure避免了不必要的多层次封装/适配，在不修改原有类同时不新增类的基础上实现了真正的多态性。defprotocol 除了可以被deftype,defrecord,reify实现外，也可以被Java中的类实现。&#xA;数据与行为分离 所以，Clojure提供更明确的方式，数据必须具有不可变性(函数式编程特性)，行为是在更搞层次抽象。推荐将数据和行为分别定义，Clojure提供了deftype，defrecord，reify, defprotocol来达到这个目的，他们就是Clojure的数据类型。defrecord用于映射你的数据记录，deftype可以理解为Java中的class，defprotocol定义行为。&#xA;defrecord defrecord在Clojure里面可以理解为是另外一种map变形方式,例如一个定义User领域模型的map为:&#xA;(def user {&amp;#34;name&amp;#34; &amp;#34;xiebiao&amp;#34; , &amp;#34;age&amp;#34; 30}) (:name user) 用defrecord来表达:</description>
    </item>
  </channel>
</rss>
