<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on </title>
    <link>//localhost:1313/tags/java/</link>
    <description>Recent content in Java on </description>
    <generator>Hugo 0.125.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 08 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mixin in Java</title>
      <link>//localhost:1313/post/2024-01-08-java-mix-in/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/post/2024-01-08-java-mix-in/</guid>
      <description>什么是Mixin 维基百科的解释是：&#xA;In object-oriented programming languages, a mixin is a class that contains methods for use by other classes without having to be the parent class of those other classes. How those other classes gain access to the mixin&amp;rsquo;s methods depends on the language. Mixins are sometimes described as being &amp;ldquo;included&amp;rdquo; rather than &amp;ldquo;inherited&amp;rdquo;.&#xA;简而言之就是：通过组合而不是继承的方式获得其他类所提供的功能。&#xA;Java中是如何做到的 面向对象编程语言可以通过继承来达到功能复用目的，但继承也会有不少陷阱，或者说有时候他们并不满足设计上的需求。&#xA;例如我们想让类具备另外多个已经存在于其他类中的功能，那么通过继承就无法实现，因为Java不允许多重继承。而且子类会全部继承父类的开放功能，也不是我们期望的，在Effective Java中也推荐优先选择复合而不是继承。&#xA;从关系类型上来说，我们也不希望为了获得某个功能，让类之间成为IS-A的关系。&#xA;这时候我们自然想到的就是接口，接口作为开放的协议约定，所有类都可以实现接口，同时类可以实现多个接口。为了让类可以实现接口同时又能获得默认实现，Java在接口中设计了default默认实现方法，这样子类可以在不需要自己实现的情况下获得接口中默认提供的功能（这里的default方法还解决了新增接口方法导致实现类变更的问题），变相地实现了多继承。&#xA;例如下面这种情况：&#xA;class A{ ... } interface B{ ... default void show(){}; .</description>
    </item>
  </channel>
</rss>
